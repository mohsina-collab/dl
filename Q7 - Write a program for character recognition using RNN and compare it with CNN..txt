Q7 - Write a program for character recognition using RNN and compare it with CNN.







!pip install extra-keras-datasets




from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense, Reshape, Flatten
from tensorflow.keras.utils import to_categorical

# Load MNIST digits dataset (0â€“9)
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# RNN Model
model_rnn = Sequential([
    Reshape((28, 28), input_shape=(28, 28)),
    SimpleRNN(128, activation='tanh'),
    Dense(64, activation='relu'),
    Dense(10, activation='softmax')
])

model_rnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model_rnn.fit(x_train, y_train, epochs=2, validation_split=0.1)
print("RNN Accuracy:", model_rnn.evaluate(x_test, y_test)[1])





from tensorflow.keras.layers import Conv2D, MaxPooling2D

model_cnn = Sequential([
    Reshape((28, 28, 1), input_shape=(28, 28)),
    Conv2D(32, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

model_cnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model_cnn.fit(x_train, y_train, epochs=2, validation_split=0.1)
cnn_score = model_cnn.evaluate(x_test, y_test)
print("CNN Test Accuracy:", cnn_score[1])